// Generated by view binder compiler. Do not edit!
package com.ntpro.mobileandroiddevtestwork.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.ntpro.mobileandroiddevtestwork.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTableRowBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView dealAmount;

  @NonNull
  public final TextView dealId;

  @NonNull
  public final TextView dealPrice;

  @NonNull
  public final TextView dealSide;

  @NonNull
  public final TableLayout table;

  @NonNull
  public final TableRow titleRow;

  @NonNull
  public final TextView toolName;

  @NonNull
  public final TextView updateTime;

  private FragmentTableRowBinding(@NonNull ConstraintLayout rootView, @NonNull TextView dealAmount,
      @NonNull TextView dealId, @NonNull TextView dealPrice, @NonNull TextView dealSide,
      @NonNull TableLayout table, @NonNull TableRow titleRow, @NonNull TextView toolName,
      @NonNull TextView updateTime) {
    this.rootView = rootView;
    this.dealAmount = dealAmount;
    this.dealId = dealId;
    this.dealPrice = dealPrice;
    this.dealSide = dealSide;
    this.table = table;
    this.titleRow = titleRow;
    this.toolName = toolName;
    this.updateTime = updateTime;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTableRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTableRowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_table_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTableRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deal_amount;
      TextView dealAmount = ViewBindings.findChildViewById(rootView, id);
      if (dealAmount == null) {
        break missingId;
      }

      id = R.id.deal_id;
      TextView dealId = ViewBindings.findChildViewById(rootView, id);
      if (dealId == null) {
        break missingId;
      }

      id = R.id.deal_price;
      TextView dealPrice = ViewBindings.findChildViewById(rootView, id);
      if (dealPrice == null) {
        break missingId;
      }

      id = R.id.deal_side;
      TextView dealSide = ViewBindings.findChildViewById(rootView, id);
      if (dealSide == null) {
        break missingId;
      }

      id = R.id.table;
      TableLayout table = ViewBindings.findChildViewById(rootView, id);
      if (table == null) {
        break missingId;
      }

      id = R.id.title_row;
      TableRow titleRow = ViewBindings.findChildViewById(rootView, id);
      if (titleRow == null) {
        break missingId;
      }

      id = R.id.tool_name;
      TextView toolName = ViewBindings.findChildViewById(rootView, id);
      if (toolName == null) {
        break missingId;
      }

      id = R.id.update_time;
      TextView updateTime = ViewBindings.findChildViewById(rootView, id);
      if (updateTime == null) {
        break missingId;
      }

      return new FragmentTableRowBinding((ConstraintLayout) rootView, dealAmount, dealId, dealPrice,
          dealSide, table, titleRow, toolName, updateTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
